{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst charactersDirectory = path.join(process.cwd(), 'characters');\nexport function getSortedCharactersData() {\n  const fileNames = fs.readdirSync(charactersDirectory);\n  const allCharactersData = fileNames.map(filename => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(charactersDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allCharactersData.sort((a, b) => {\n    if (a.name < b.name) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllCharacterIds() {\n  const fileNames = fs.readdirSync(charactersDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getCharacterData(id) {\n  const fullPath = path.join(charactersDirectory, `${id}.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Combine the data with the id\n\n  return _objectSpread({\n    id\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/jormpoon/Desktop/Personal Projects/epic_seven_guide/lib/characters.js"],"names":["fs","path","matter","charactersDirectory","join","process","cwd","getSortedCharactersData","fileNames","readdirSync","allCharactersData","map","filename","id","fileName","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","name","getAllCharacterIds","params","getCharacterData"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,mBAAmB,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,YAAzB,CAA5B;AAEA,OAAO,SAASC,uBAAT,GAAmC;AACtC,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,mBAAf,CAAlB;AAEA,QAAMO,iBAAiB,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAChD,UAAMC,EAAE,GAAGC,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AAEA,UAAMC,QAAQ,GAAGf,IAAI,CAACG,IAAL,CAAUD,mBAAV,EAA+BW,QAA/B,CAAjB;AACA,UAAMG,YAAY,GAAGjB,EAAE,CAACkB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AAEA,UAAMG,YAAY,GAAGjB,MAAM,CAACe,YAAD,CAA3B;AAEA;AACIJ,MAAAA;AADJ,OAEOM,YAAY,CAACC,IAFpB;AAIH,GAZyB,CAA1B;AAcA,SAAOV,iBAAiB,CAACW,IAAlB,CAAuB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANI,CAAP;AAOH;AAED,OAAO,SAASC,kBAAT,GAA8B;AACjC,QAAMjB,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,mBAAf,CAAlB;AACA,SAAOK,SAAS,CAACG,GAAV,CAAcG,QAAQ,IAAI;AAC/B,WAAO;AACLY,MAAAA,MAAM,EAAE;AACNb,QAAAA,EAAE,EAAEC,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B;AADE;AADH,KAAP;AAKD,GANM,CAAP;AAOD;AAED,OAAO,SAASY,gBAAT,CAA0Bd,EAA1B,EAA8B;AACnC,QAAMG,QAAQ,GAAGf,IAAI,CAACG,IAAL,CAAUD,mBAAV,EAAgC,GAAEU,EAAG,KAArC,CAAjB;AACA,QAAMI,YAAY,GAAGjB,EAAE,CAACkB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB,CAFmC,CAInC;;AACA,QAAMG,YAAY,GAAGjB,MAAM,CAACe,YAAD,CAA3B,CALmC,CAOnC;;AACA;AACEJ,IAAAA;AADF,KAEKM,YAAY,CAACC,IAFlB;AAID","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst charactersDirectory = path.join(process.cwd(), 'characters')\n\nexport function getSortedCharactersData() {\n    const fileNames = fs.readdirSync(charactersDirectory)\n\n    const allCharactersData = fileNames.map(filename => {\n        const id = fileName.replace(/\\.md$/, '')\n\n        const fullPath = path.join(charactersDirectory, fileName)\n        const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n        const matterResult = matter(fileContents)\n\n        return {\n            id,\n            ...matterResult.data\n          }\n    })\n\n    return allCharactersData.sort((a, b) => {\n        if (a.name < b.name) {\n          return 1\n        } else {\n          return -1\n        }\n      })\n}\n\nexport function getAllCharacterIds() {\n    const fileNames = fs.readdirSync(charactersDirectory)\n    return fileNames.map(fileName => {\n      return {\n        params: {\n          id: fileName.replace(/\\.md$/, '')\n        }\n      }\n    })\n  }\n\n  export function getCharacterData(id) {\n    const fullPath = path.join(charactersDirectory, `${id}.md`)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n  \n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n  \n    // Combine the data with the id\n    return {\n      id,\n      ...matterResult.data\n    }\n  }"]},"metadata":{},"sourceType":"module"}